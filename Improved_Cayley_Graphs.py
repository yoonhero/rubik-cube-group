from cube import solved_state, make_move
import networkx as nx
import matplotlib.pyplot as plt
import itertools
from neo4j import GraphDatabase
import hashlib
from tqdm import tqdm

# Function to convert state to a SHA-256 hash
def hash_state(state):
    state_str = str(state).encode('utf-8')
    sha256 = hashlib.sha256()
    sha256.update(state_str)
    state_hash = sha256.hexdigest()
    return state_hash

# Function to visualize the Cayley graph
def search_space(generators, max_depth=10):
    G = nx.DiGraph()
    identity = solved_state[:]
    hashed_identity = hash_state(identity)
    G.add_node(hashed_identity)
    
    states = {hashed_identity: 0}
    queue = [identity]

    pbar = tqdm(total=max_depth)
    current_depth = 0
        
    while queue:
        current = queue.pop(0)
        hashed_current = hash_state(current)
        depth = states[hashed_current]
        if depth > current_depth:
            pbar.update(1)
            current_depth = depth
        if depth < max_depth:
            for moves in generators:
                next_state = current[:]
                for move in moves.split(" "):
                    next_state = make_move(next_state, move)
                hashed_next_state = hash_state(next_state)
                if hashed_next_state not in list(states.keys()):
                    states[hashed_next_state] = depth + 1
                    queue.append(next_state)
                    G.add_node(hashed_next_state)

                G.add_edge(hashed_current, hashed_next_state, label=moves)

    pbar.close()
    print("Finishing the Search")
    return G, states

def store_graph_in_neo4j(G, states):
    # Replace with your Neo4j credentials
    uri = "bolt://localhost:7687"
    username = "neo4j"
    password = "neo4j"
    driver = GraphDatabase.driver(uri, auth=(username, password))

    def create_graph_in_neo4j(tx, graph):
        # Create nodes
        for node in graph.nodes:
            tx.run("CREATE (n:Node {id: $id, depth: $depth})", id=node, depth=str(states[node]))
        
        # Create relationships
        for edge in graph.edges:
            # cypher = f'''MATCH (a:Node {id: $source}), (b:Node {id: $target})
            # CREATE (a)-[:{edge[2]["label"]}]->(b)'''
            tx.run('''MATCH (a:Node {id: $source}), (b:Node {id: $target})
            CREATE (a)-[:]->(b)''', source=edge[0], target=edge[1])

    with driver.session() as session:
        session.write_transaction(create_graph_in_neo4j, G)

    # # Export the graph to GraphML using APOC
    # with driver.session() as session:
    #     session.run("CALL apoc.export.graphml.all('graph.graphml', {})")
    # Close the Neo4j driver
    driver.close()


def visualize_graph(G, states, readability=False):
    plt.figure(figsize=(20, 16))
    if readability:
        pos = nx.kamada_kawai_layout(G)
    else:
        pos = nx.spring_layout(G)
    labels = {node: str(states[node]) for node in G.nodes}
    edge_labels = {(u, v): d['label'] for u, v, d in G.edges(data=True)}
    
    nx.draw(G, pos, with_labels=True, labels=labels, node_color='lightblue', node_size=500, font_size=10, font_color='black', font_weight='bold', edge_color='gray', linewidths=1, alpha=0.9)
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red')
    
    plt.title(f'Cayley Graph of Subgroup Generated by {" and ".join(generators)} Moves', fontsize=50)
    plt.savefig(f'{" and ".join(generators)} Moves.png', bbox_inches='tight',dpi=400)

if __name__ == "__main__":
    generators = ["R", "U", "F", "D", "L", "B"]
    graph, states = search_space(generators, max_depth=8)
    visualize_graph(graph, states)
    # store_graph_in_neo4j(graph, states)