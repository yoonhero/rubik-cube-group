from tqdm import tqdm
from cube import solved_state, make_move
from Improved_Cayley_Graphs import hash_state

def find_the_num_of_subgroup_members(generators, max_depth=10000):
    identity = solved_state[:]
    hashed_identity = hash_state(identity)
    
    states = {hashed_identity:0}
    queue = [identity]

    pbar = tqdm(total=max_depth)
    current_depth = 0
        
    while queue:
        current = queue.pop(0)
        hashed_current = hash_state(current)
        depth = states[hashed_current]
        if depth > current_depth:
            pbar.update(1)
            current_depth = depth
        if depth < max_depth:
            for moves in generators:
                next_state = current[:]
                for move in moves.split(" "):
                    next_state = make_move(next_state, move)
                hashed_next_state = hash_state(next_state)
                # print(next_state)
                if hashed_next_state not in list(states.keys()):
                    # print(next_state)
                    states[hashed_next_state]=depth+1
                    queue.append(next_state)
                    pbar.set_description("Total Members %s" % len(list(states.values())))

    pbar.close()
    print("Finishing the Search")

    return len(list(states.values()))

# generators = ["R R", "F F", "B B", "L L", "U U", "D D", "R' R'", "F' F'", "B' B'", "L' L'", "U' U'", "D' D'"]
# generators = ["R R", "U U"]
generators = ["R", "U"]

order = find_the_num_of_subgroup_members(generators)

print(f"The number of subgroup member generated by {' and '.join(generators)} is: {order}") 