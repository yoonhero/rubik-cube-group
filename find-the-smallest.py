from cube import solved_state, make_move

# Function to find the smallest cycle (order) of a subgroup generated by U and R
def find_smallest_cycle(moves, max_depth=10000):
    identity = solved_state
    state = identity[:]
    for depth in range(1, max_depth + 1):
        for direction in moves.split(" "):
            state = make_move(state, direction)
        if state == identity:
            return depth
    return None

# moves = "U U"
# moves = ["R", "R", "U", "U"]
# moves = ["R", "U", "R'", "U'"]
# moves = ["R"]

generators = ["R U U D' B D'", "F R", "R' U' F B U' F' D B U D B' U' R R D' L L U' L L D' L L U' R R"]

for moves in generators:
    order = find_smallest_cycle(moves)

    print(f"The smallest cycle (order) of the subgroup generated by {''.join(moves.split(' '))} is: {order}") 